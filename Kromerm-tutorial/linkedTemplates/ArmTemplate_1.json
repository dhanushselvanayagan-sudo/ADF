{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Kromerm-tutorial"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MoviesUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_DS",
								"type": "DatasetReference"
							},
							"name": "SourceMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_DS",
								"type": "DatasetReference"
							},
							"name": "SinkDestination"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "Transformation"
						}
					],
					"script": "source(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceMovie\nSourceMovie alterRow(updateIf(title=='20,000 leagues Under the Sea'),\n\tdeleteIf(year<1900||isNull(year))) ~> AlterRow\nAlterRow derive(title = title + '(' + toString(year) + ')') ~> Transformation\nTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['movie'],\n\tformat: 'table',\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\t{Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkDestination"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RadioJSON",
								"type": "DatasetReference"
							},
							"name": "SourceData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SynapseDataSet",
								"type": "DatasetReference"
							},
							"name": "DestinationDW"
						}
					],
					"transformations": [
						{
							"name": "ColumnFilter"
						},
						{
							"name": "GenderGrouping"
						},
						{
							"name": "LocationGrouping"
						},
						{
							"name": "OriginalSelect"
						},
						{
							"name": "GenderJoin"
						},
						{
							"name": "LocationJoin"
						},
						{
							"name": "CleanUp"
						},
						{
							"name": "ColumnAlter"
						}
					],
					"script": "source(output(\n\t\tts as string,\n\t\tuserId as string,\n\t\tsessionId as string,\n\t\tpage as string,\n\t\tauth as string,\n\t\tmethod as string,\n\t\tstatus as string,\n\t\tlevel as string,\n\t\titemInSession as string,\n\t\tlocation as string,\n\t\tlastName as string,\n\t\tfirstName as string,\n\t\tregistration as string,\n\t\tgender as string,\n\t\tartist as string,\n\t\tsong as string,\n\t\tlength as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> SourceData\nSourceData select(mapColumn(\n\t\tTimeStamp = ts,\n\t\tpage,\n\t\tmethod,\n\t\tstatus,\n\t\tlevel,\n\t\tlocation,\n\t\tlastName,\n\t\tfirstName,\n\t\tgender,\n\t\tregistration\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnFilter\nColumnFilter aggregate(groupBy(gender,\n\t\tlevel),\n\tCount_Gender = count(),\n\t\tTimeStamp = first(TimeStamp)) ~> GenderGrouping\nColumnFilter aggregate(groupBy(location),\n\tCount_Location = count(),\n\t\tTimeStamp = first(TimeStamp)) ~> LocationGrouping\nColumnFilter select(mapColumn(\n\t\tTimeStamp,\n\t\tpage,\n\t\tmethod,\n\t\tstatus,\n\t\tlevel,\n\t\tlocation,\n\t\tlastName,\n\t\tfirstName,\n\t\tgender,\n\t\tregistration\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> OriginalSelect\nOriginalSelect, GenderGrouping join(OriginalSelect@TimeStamp == GenderGrouping@TimeStamp,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> GenderJoin\nGenderJoin, LocationGrouping join(OriginalSelect@TimeStamp == LocationGrouping@TimeStamp,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> LocationJoin\nLocationJoin select(mapColumn(\n\t\tTimeStamp = OriginalSelect@TimeStamp,\n\t\tpage,\n\t\tmethod,\n\t\tstatus,\n\t\tlevel = OriginalSelect@level,\n\t\tlocation = OriginalSelect@location,\n\t\tlastName,\n\t\tfirstName,\n\t\tgender = OriginalSelect@gender,\n\t\tregistration,\n\t\tgender = GenderGrouping@gender,\n\t\tlevel = GenderGrouping@level,\n\t\tCount_Gender,\n\t\tTimeStamp = GenderGrouping@TimeStamp,\n\t\tlocation = LocationGrouping@location,\n\t\tCount_Location,\n\t\tTimeStamp = LocationGrouping@TimeStamp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CleanUp\nCleanUp derive(FulllName = firstName + \" \" + lastName,\n\t\tState = split(location, ', ')[2]) ~> ColumnAlter\nColumnAlter sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DestinationDW"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TypeConversion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_DS",
								"type": "DatasetReference"
							},
							"name": "MovieSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_DS",
								"type": "DatasetReference"
							},
							"name": "DestinationSink"
						}
					],
					"transformations": [
						{
							"name": "TypeConversion"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MovieSource\nMovieSource derive(movie = toInteger(movie),\n\t\tyear = toInteger(year),\n\t\tRating = toInteger(Rating),\n\t\t{Rotton Tomato} = toInteger(\"Rotton Tomato\")) ~> TypeConversion\nTypeConversion sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating,\n\t\t{Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'allErrors',\n\ttransactionCommit: 'batch',\n\treportSuccessOnError: false) ~> DestinationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieUpdate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TypeConversion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TypeConversion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MovieSource": {},
									"DestinationSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TypeConversion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewMoviesUpdate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceMovie": {},
									"SinkDestination": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/radiodata_transformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RadioData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SourceData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceData": {},
									"DestinationDW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SourceData')]"
			]
		}
	]
}